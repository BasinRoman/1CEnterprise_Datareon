Процедура ОбработкаОчередиВходящихСообщений()
	Если НЕ сшпОбщегоНазначения.ПроверитьЭкземплярИнформационнойБазы() тогда
		ЗаписьЖурналаРегистрации("ESB. Управление пулом обработчиков", УровеньЖурналаРегистрации.Ошибка,,, "Рассинхронизация идентификаторов информационной базы");
		Возврат;
	КонецЕсли;
	
	остатокВремениОжидания = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпДлительностьОжидания") * 1000;
	максимумПотоков = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпМаксимальноеКоличествоПотоковОбработкиВходящих");
	Пока остатокВремениОжидания > 0 Или сшпФункциональныеОпции.АвтоматическийСтартОбработчиков() цикл
		СтартОжидания = ТекущаяУниверсальнаяДатаВМиллисекундах();
		Если НЕ ПолучитьФункциональнуюОпцию("сшпИспользоватьСШП") ИЛИ ПолучитьФункциональнуюОпцию("сшпОтключитьПотоки") тогда
			Прервать;
		ИначеЕсли ИдетОбработкаСистемныхСобытий() тогда // Если включена обработка системных событий приостанавливаем рабочие потоки.
			сшпОбщегоНазначения.Ожидание(10);
			Продолжить;
		КонецЕсли;
		текКоличествоПотоков = максимумПотоков - сшпОбщегоНазначения.ПолучитьКоличествоПотоков("Наименование", "ОбработатьВходящееСообщение");
		Если текКоличествоПотоков > 0 тогда
			текЗапрос = Новый Запрос("ВЫБРАТЬ
	                         |	тбОчередь.ДатаРегистрации КАК ДатаРегистрации,
	                         |	тбОчередь.ДатаСоздания КАК ДатаСоздания,
	                         |	тбОчередь.ИдентификаторСообщения КАК ИдентификаторСообщения,
	                         |	тбОчередь.ФорматСообщения КАК ФорматСообщения,
	                         |	тбОчередь.КлассСообщения КАК КлассСообщения,
	                         |	тбСостояние.ДатаИзменения КАК ДатаИзменения,
	                         |	ВЫБОР
	                         |		КОГДА тбОчередь.КлассСообщения = ""6""
	                         |			ТОГДА 0
	                         |		КОГДА тбОчередь.КлассСообщения = ""4""
	                         |			ТОГДА 1
	                         |		КОГДА тбОчередь.КлассСообщения = ""320""
	                         |			ТОГДА 2
	                         |		КОГДА тбОчередь.КлассСообщения = ""18""
	                         |			ТОГДА 3
	                         |		КОГДА тбОчередь.КлассСообщения = ""8""
	                         |			ТОГДА 4
	                         |		КОГДА тбОчередь.КлассСообщения = ""11""
	                         |			ТОГДА 5
	                         |		ИНАЧЕ 6
	                         |	КОНЕЦ КАК Порядок
	                         |ПОМЕСТИТЬ втсшпОчередьВходящихСообщений
	                         |ИЗ
	                         |	РегистрСведений.сшпОчередьВходящихСообщений КАК тбОчередь
	                         |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.сшпСостояниеСообщений КАК тбСостояние
	                         |		ПО тбОчередь.ИдентификаторСообщения = тбСостояние.ИдентификаторСообщения
							             |			И (тбСостояние.СтатусСообщения В (&СписокСтатусов))
							             |			И (тбСостояние.ЗадержкаЧисло <= &ЗадержкаЧисло)
	                         |;
	                         |
	                         |////////////////////////////////////////////////////////////////////////////////
	                         |ВЫБРАТЬ ПЕРВЫЕ " + Строка(текКоличествоПотоков) + "
	                         |	тбОчередь.ДатаРегистрации КАК ДатаРегистрации,
	                         |	тбОчередь.ИдентификаторСообщения КАК ИдентификаторСообщения,
	                         |	тбОчередь.ФорматСообщения КАК ФорматСообщения,
	                         |	тбОчередь.КлассСообщения КАК КлассСообщения,
	                         |	тбОчередь.Порядок КАК Порядок
	                         |ИЗ
	                         |	втсшпОчередьВходящихСообщений КАК тбОчередь
	                         |
	                         |УПОРЯДОЧИТЬ ПО
	                         |	тбОчередь.Порядок,
	                         |	тбОчередь.ДатаСоздания,
	                         |	тбОчередь.ДатаИзменения");
			текЗапрос.УстановитьПараметр("СписокСтатусов", сшпКэшируемыеФункции.ПоучитьСписокРабочихСтатусов());
			текЗапрос.УстановитьПараметр("ЗадержкаЧисло", сшпОбщегоНазначения.ПеревестиДатуВЧисло(ТекущаяДатаСеанса()));
			текРезультат = текЗапрос.Выполнить();
			Если текРезультат.Пустой() тогда
				Если сшпФункциональныеОпции.АвтоматическийСтартОбработчиков() тогда
					Прервать
				Иначе	
					сшпОбщегоНазначения.Ожидание(10);
					остатокВремениОжидания = остатокВремениОжидания - (ТекущаяУниверсальнаяДатаВМиллисекундах() - СтартОжидания);
				КонецЕсли;
			Иначе
				текИдентификатор = "Идентификатор не определен";
				Попытка
					текВыборка = текРезультат.Выбрать();
					Пока текВыборка.Следующий() цикл
						текИдентификатор = текВыборка.ИдентификаторСообщения;
						сшпРаботаСДанными.УстановитьСостояниеСообщения(текИдентификатор, Перечисления.сшпСтатусыСообщений.ВОбработке);
						мсвПараметры = Новый Массив;
						мсвПараметры.Добавить(текИдентификатор);
						мсвПараметры.Добавить(текВыборка.ФорматСообщения);
						мсвПараметры.Добавить(текВыборка.КлассСообщения);
						мсвПараметры.Добавить(текВыборка.ДатаРегистрации);
						ФоновыеЗадания.Выполнить("сшпОбслуживаниеОчередей.ОбработатьВходящееСообщение",мсвПараметры, текИдентификатор, "ОбработатьВходящееСообщение");
					КонецЦикла;
					остатокВремениОжидания = сшпРаботаСКонстантами.ПолучитьЗначениеКонстанты("сшпДлительностьОжидания") * 1000; // Сбросим счетчик ожидания сообщений.
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					ЗаписьЖурналаРегистрации("ESB. Обработка очереди входящих сообщений", УровеньЖурналаРегистрации.Ошибка,,текИдентификатор, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
				КонецПопытки;
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
